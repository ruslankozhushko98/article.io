// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  @@map("accounts")
  id                String   @id @default(cuid())
  type              String
  provider          String
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  userId            Int      @map("user_id") @unique
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  @@map("sessions")
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  userId       Int      @map("user_id")
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  @@map("verification_tokens")
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model User {
  @@map("users")
  id            Int       @id @default(autoincrement())
  email         String    @unique
  emailVerified DateTime? @map("email_verified")
  name          String?
  phoneNumber   String?   @map("phone_number")
  image         String?
  comments      Comment[]
  articles      Article[]
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @updatedAt      @map("updated_at")
}

model Article {
  @@map("articles")
  id          Int      @id @default(autoincrement())
  title       String
  description String
  userId      Int      @map("user_id")
  user        User     @relation(fields: [userId], references: [id])
  comments    Comment[]
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt      @map("updated_at")
}

model Comment {
  @@map("comments")
  id        Int      @id @default(autoincrement())
  text      String
  userId    Int      @map("user_id")
  user      User     @relation(fields: [userId], references: [id])
  articleId Int      @map("article_id")
  article   Article  @relation(fields: [articleId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt      @map("updated_at")
}
